1) access specifiers.
2) Rounding off
3) methods setter getter methods
4) this
------------------------------------------------------------------------

* Access specifiers: They decides accessibility of a class, member variable
and methods.

* private, default/package, protected ( inheritance) , public

class Revise1{
    private int num;
  }

class ReviseMain1 {
  public static void main(String args[]) {
   Revise1 rev=new Revise1();
   System.out.println(rev.num); 
 }
}

[Note: The above code gives compilation error as we are trying to access the private member of a
class Revise1 from main method which is ReviseMain1.]


class Revise2{
    private int num;

    private void display(){
    System.out.println(num);
   }
  }

class ReviseMain2 {
  public static void main(String args[]) {
   Revise2 rev=new Revise2();
   System.out.println(rev.num);
   rev.display(); 
 }
}

[Note: The above code will show compilation error.]
--------------------------------------------------------------------
Whenever we are designing a class. Class is having two types of members.
* member variables/instance variables
* member methods

class Revise3 {
   private int num1;
   private int num2;
   private String str; 
   public void setData(int n1, int n2, String s){
     num1=n1;  // In primitive type we are passing the value of parameter to the instance variable
     num2=n2;
     str=s;   // String is not a primitive datatype. It is non-primitive and of Reference type
              // In this type we are passing the address and not the value. 
   }
  public void setData(String s,int n1, int n2 ){
   num1=n1;
   str=s;
   num2=n2;
   }
}

 class ReviseMain3 {
   public static void main(String args[]) {
     Revise3 revise=new Revise3();
     revise.setData(1,2,"Welcome");
    // revise.setData(1,"Welcome",2);
    revise.setData("Hello",3,4);
  }
}
-----------------------------------------------------------------------
class BankAccount {
   private int id;
   private String accountHolderName;
   private String bankName;
/* for a property like id, accountHolderName and bankName we should have a pair of methods.
  one method to set the value and another method is to display the values.
  * The method which for is setting the value, have return type as void and parameter of the 
    same type for which the setter method is written. 
  * The method starts with set and followed by making the first character of the property in
    uppercase.
  * example if we are writting for id , we write as follow:
  * id is the name of the parameter and id is also the name of the member variable.
  * the local variable will be having higher preference to the instance variable.
  * So the parameter id is again assign to id , if we are not using this to differentiate
    between member and parameter.
  * this represents the current object 
   public void setId(int id){
      this.id=id;
    }
  * For reading or accessing the value, we write getter method, so
  * getter method have return type same as that of the member variable for which we are writting
    the getter method.
  * The name of the method starts with get followed by making the first character in uppercase.
  * We dont have any parameter.
  * So example:
   public int getId(){
     return id;
   }   
  

*/

  setter/getter

}


-------------------------------------------------------------------------------------------------
public class Rounding {

	public static void main(String[] args) {
		
		float f1=12.45f;
		float f2=15.67f;
		float f3=12.50f;
		float f4=18.49f;
		System.out.println(Math.round(f1));
		System.out.println(Math.round(f2));
		System.out.println(Math.round(f3));
		System.out.println(Math.round(f4));
		float f5=123.4657f;
		System.out.println(Math.round(f5));
		float f6=Math.round(f5*100)/100.0f;
	    System.out.println(f6);
	    float f7=Math.round(f5*10)/10.0f;
	    System.out.println(f7);
	}

}
-------------------------------------------------------------------------------------------------  
Q. How to create setter getter methods in Eclipse without writing the code.
A  We can right click on the text editor. Select Source . Select setter and getter.

We cannot have two public classes in the same file. So one of the class which is having
main, we make that class as public and the other classes we keep them as default(not using any 
access specifier). Suppose in the below example file name is Tester.java as Tester class is 
public. Tester class is having the main method. So if multiple classes are present in a 
single file, that class is made public which is having the main method.



class Customer {

	private String customerId;
	private String customerName;
	private long contactNumber;
	private String address;
	public String getCustomerId() {
		return customerId;
	}
	public void setCustomerId(String customerId) {
		this.customerId = customerId;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public long getContactNumber() {
		return contactNumber;
	}
	public void setContactNumber(long contactNumber) {
		this.contactNumber = contactNumber;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	
	
}

public class Tester {

	public static void main(String args[]) {
		Customer customer = new Customer();
		/*
		 * customer.customerId = "C101"; customer.customerName = "Jack";
		 * customer.contactNumber = 9870345687L; customer.address =
		 * "D089, St. Louis Street, Springfield";
		 * 
		 * System.out.println("Displaying customer details");
		 * System.out.println("Customer Id : " + customer.customerId);
		 * System.out.println("Customer Name : " + customer.customerName);
		 * System.out.println("Contact Number : " + customer.contactNumber);
		 * System.out.println("Address : " + customer.address);
		 */
		customer.setCustomerId("E0001");
		customer.setCustomerName("Tom");
		customer.setContactNumber(1234567890);
		customer.setAddress("Hyderabad");
		System.out.println(customer.getCustomerId());
		System.out.println(customer.getCustomerName());
		System.out.println(customer.getContactNumber());
		System.out.println(customer.getAddress());
		
	}
}
---------------------------------
public class Employee {
private int id;
private String name;
private String designation;
private String department;
private int basic;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public String getDepartment() {
	return department;
}
public void setDepartment(String department) {
	this.department = department;
}
public int getBasic() {
	return basic;
}
public void setBasic(int basic) {
	this.basic = basic;
}

}


public class EmployeeMain {

	public static void main(String[] args) {
		Employee employee=new Employee();
		employee.setId(1);
		employee.setName("Raghav");
		employee.setDesignation("Manager");
		employee.setDepartment("Sales");
		employee.setBasic(23000);
		//System.out.println(employee.getId());
		int id=employee.getId();
		System.out.println(id);
		//System.out.println(employee.getName());
		String name=employee.getName();
		System.out.println(name);
		System.out.println(employee.getDesignation());
		System.out.println(employee.getDepartment());
		System.out.println(employee.getBasic());

	}

}
------------------------------------------------------------------------------------------------------
public class Employee2 {
private int id;
private String name;
private String designation;
private String department;
private int basic;
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public String getDepartment() {
	return department;
}
public void setDepartment(String department) {
	this.department = department;
}
public int getBasic() {
	return basic;
}
public void setBasic(int basic) {
	this.basic = basic;
}

}


public class EmployeeMain2 {
	public static void main(String[] args) {
		Employee2 employee1=new Employee2();
                Employee2 employee2=new Employee2();
		employee1.setId(1);
		employee1.setName("Raghav");
		employee1.setDesignation("Manager");
		employee1.setDepartment("Sales");
		employee1.setBasic(23000);
                employee2.setId(2);
                employee2.setName("Akash");
                employee2.setDesignation("AsstManager");
                employee2.setDepartment("Sales");
                employee2.setBAsic(20000);
		//System.out.println(employee1.getId());
		int id=employee1.getId();
		System.out.println(id);
		//System.out.println(employee1.getName());
		String name=employee1.getName();
		System.out.println(name);
		System.out.println(employee1.getDesignation());
		System.out.println(employee1.getDepartment());
		System.out.println(employee1.getBasic());
               employee2.setBAsic(20000);
		System.out.println(employee2.getId());
		System.out.println(employee2.getName());
		System.out.println(employee2.getDesignation());
		System.out.println(employee2.getDepartment());
		System.out.println(employee2.getBasic());

	}

}

--------------------------------------------------------------------------------------
class Employee {

	String employeeId;
	String employeeName;
	int salary;
	int bonus;
	int jobLevel;

	public void calculateSalary() {
		if (this.jobLevel >= 4) {
			this.bonus = 100;
		} else {
			this.bonus = 50;
		}
		this.salary += this.bonus;
	}
}

class Tester {

	public static void main(String args[]) {

		Employee employee = new Employee();
		employee.employeeId = "C101";
		employee.employeeName = "Steve";
		employee.salary = 650;
		employee.jobLevel = 4;

		employee.calculateSalary();

		System.out.println("Employee Details");
		System.out.println("Employee Id: " + employee.employeeId);
		System.out.println("Employee Name: " + employee.employeeName);
		System.out.println("Salary: " + employee.salary);

	}
}
---------------------------------------------------------------------------
class Main {
    public static void main(String args[]) {
    System.out.println("Hello Friends");
    Scanner scan=new Scanner(System.in);
    int num=scan.nextInt();
    }
   }
 }
[So we are not able to see the implementation of println and nextInt method. ]
----------------------------------------------------------------------------------------
Without abstraction

We have a class Number and we have to find the number which max/larger.


  public class Number {
   private int num1;
   private int num2;
   private int max;
   
   // setter/getter methods for num1,num2 and max.
    

   }
 
   public class NumberMain {
   public static void main(String args[]) {
    Number number=new Number();
    number.setNum1(10);
    number.setNum2(2);
    if(number.getNum1()>number.getNum2()){
    number.setMax(number.getNum1());
    }
    else
    {
    number.setMax(number.getNum2());
    }
    System.out.println(number.getMax());
   }
 }
 -----------------------------------

  public class Number {
   private int num1;
   private int num2;
   private int max;
   
   // setter/getter methods for num1,num2 and max.
    

   }
 
   public class NumberMain {
   public static void main(String args[]) {
    Number number=new Number();
    number.setNum1(10);
    number.setNum2(2);
    int max=(number.getNum1()>number.getNum2())?number.getNum1():number.getNum2();
    System.out.println(max);
 }
}
-------------------------------------------------------------
Abstraction


 public class Number {
   private int num1;
   private int num2;
   private int max;
   
   // setter/getter methods for num1,num2 and for max only the getter method
    
    public int getMax(){
    /*  if(num1>num2) {
       max=num1;
      }  
      else {
      max=num2;
      } */
      max=(num1>num2)?num1:num2;
      return max;
     }
    
   }
 
   public class NumberMain {
   public static void main(String args[]) {
    Number number=new Number();
    number.setNum1(10);
    number.setNum2(2);
    int max=number.getMax();
    System.out.println(max);
   }
 }
-----------------------------------------------------------------------------------------------------
Complete the code with proper access specifiers and add the code as required.

public class Number {
 private int num1;
 private int num2;
 private int result;
 
 //setter/getter methods for num1 and num2 and decide whether we require setter and getter for result


 

public int add(){
 
 }

public int subtract(){

 }

public int multiply(){

 }

public int max(){
 }
 
public int min(){
 }

}

import java.util.Scanner;
public class NumberMain{
   public static void main(String args[]) {
    Number number=new Number();
    int result=0;
    int num1;
    int num2;
    Scanner scan=new Scanner(System.in);
    System.out.println("Enter number1");
    System.out.println("Enter number2");
    System.out.println("The addition of num1 "+" and num2="+result);
    System.out.println("The subtraction of num2 "+" from num1="+result);
    System.out.println("The multiplication of num1 "+"with num2="+result);
    System.out.println(result+" is maximum");
    System.out.println(result+" is minimum");
    }
 }

---------------------------------------------------------------
SOLUTION

public class Number {
 private int num1;
 private int num2;
 private int result;
 
 //setter/getter methods for num1 and num2 and decide whether we require setter and getter for result
public int getNum1() {
	return num1;
}

public void setNum1(int num1) {
	this.num1 = num1;
}

public int getNum2() {
	return num2;
}

public void setNum2(int num2) {
	this.num2 = num2;
}

public int add(){
	 result=num1+num2;
	 return result;
	 }

public int subtract(){
	result=num1-num2;
	 return result;
 }

public int multiply(){
	result=num1*num2;
	 return result;
 }
/*
 * if(num1>num2){
 * max=num1;
 * }
 * else
 * {
 * max=num2;
 * }
 */
public int max(){
	result=(num1>num2)?num1:num2;
	return result;
 }
 
public int min(){
 result=(num1<num2)?num1:num2;
 return result;

}

}

import java.util.Scanner;
public class NumberMain{
   public static void main(String args[]) {
    Number number=new Number();
    int result=0;
    int num1;
    int num2;
    Scanner scan=new Scanner(System.in);
    System.out.println("Enter number1");
    num1=scan.nextInt();
    number.setNum1(num1);
    System.out.println("Enter number2");
    num2=scan.nextInt();
    number.setNum2(num2);
    result=number.add();
    System.out.println("The addition of num1 "+" and num2="+result);
    System.out.println("The addition of "+number.getNum1()+" and "+number.getNum2()+"="+result);
    result=number.subtract();
    System.out.println("The subtraction of num2 "+" from num1="+result);
    result=number.multiply();
    System.out.println("The multiplication of num1 "+"with num2="+result);
    result=number.max();
    System.out.println(result+" is maximum");
    result=number.min();
    System.out.println(result+" is minimum");
    }
 }

------------------------------------------------------------------------------
public class StringDemo1 {

   public static void main(String args[]) {
  // In the below statement we created a String reference variable with the name str1 and it is storing the address of the string "Welcome".    
   String str1="Welcome";
  // We created a string object called the parameterized constructor of String class which is
  // accepting a String as a parameter 
  String str2=new String("Hello");
  System.out.println(str1);
  System.out.println(str2);
 }
} 
       
--------------
public class StringDemo2 {

   public static void main(String args[]) {
   String str1="hello"; // In this line hello is a string literal/constant
   // So when we writing the above line, it will first check whether we 
   // have hello in the String constant pool, as in our case it is first
   // line , it wont find "hello" in the string pool. So this constant(hello) is placed 
   // in the string pool
  String str2="hello"; // For this line again a check is done in the String constant pool,
  // this time a string literal "hello" is found in the pool. So now the reference variable
  // str2 will also point to the same string literal hello which got created before.
   System.out.println(str1==str2);
  }
} 

public class StringDemo3 {

   public static void main(String args[]) {
   String str1=new String("hello"); 
   String str2=new String("hello"); 
   System.out.println(str1==str2);
  }
} 

--------------------------------------------------------------------------------------
public class StringDemo4 {

   public static void main(String args[]) {
   String str1="hello"; 
   int length=str1.length();
   System.out.println(length);   //5
   str1="Welcome";
   length=str1.length();
   System.out.println(length);   //7
 }
}
---------------------------------------------------------------------------------------------------- 
public class StringDemo5 {
  public static void main(String args[]) {
    String str1="Hello";
    String str2="World";
    String str3=str1+str2;
    System.out.println(str3);
    String str4=str1.concat(str2);
    System.out.println(str4);
    String str5=str1+" "+str2;
    System.out.println(str5);
    String str6=str1.concat(" ").concat(str2);
          // Hello(space is concatenated
          // Hello World
    System.out.println(str6);
  }
 }
-------------------------------------------------------------------------------------------------
   public class StringDemo6 {
     public static void main(String args[]) {
      String str1="hello";
      String str2="hello";
      String str3=new String("hello");
      String str4=new String("hello");
      System.out.println(str1==str2);  // true   == checks whether the reference variable are pointing to the same object or not
      System.out.println(str3==str4);  // false
      System.out.println(str1.equals(str2)); // true  // equals will check for the content , whether the content of the objects are same or not.

      System.out.println(str3.equals(str4)); // true
    }
  }
[So whenever we are planning to compare two strings, we should use equals or equalsIgnoreCase method.]
---------------------------------------------------------------
 public class StringDemo7 {
     public static void main(String args[]) {
      String str1="hello";
      String str2="hEllo";
      String str3=new String("hello");
      String str4=new String("hello");
      System.out.println(str1==str2);  // false  == checks whether the reference variable are pointing to the same object or not.Here the object are different one small e and another with uppercase E.
      System.out.println(str3==str4);  // false
      System.out.println(str1.equals(str2)); // false  // equals will check for the content , whether the content of the objects are same or not.
      System.out.println(str1.equalsIgnoreCase(str2)); //true comparison is done without considering the case 
      System.out.println(str3.equals(str4)); // true
    }
  }
--------------------------------------------------------------------------
public class StringDemo8 {
     public static void main(String args[]) {
      String str1="welcome";
      String upper=str1.toUpperCase();
      System.out.println(upper);
      String str2="WELCOME";
      String lower=str2.toLowerCase();
      System.out.println(lower);
     }
  }
-----------------------------------------------------------------------------------------------------
public class StringDemo9 {
     public static void main(String args[]) {
      String str1="welcome";
      char ch=str1.charAt(0);
      System.out.println(ch); //w
      ch=str1.charAt(2);  //l
      System.out.println(ch);
     // ch=str1.charAt(20); // java.lang.StringIndexOutOfBoundsException: String index out of range: 20
     // System.out.println(ch);
     }
  }
-------------------------------------------------------------------------------------------------------------
public class StringDemo10 {
     public static void main(String args[]) {
      String str1="welcome";
      String subString1=str1.substring(3); // Start from the 3rd position of String till the end of the String
      System.out.println(subString1); //come
      String subString2=str1.substring(2,4); // 2==> startIndex, 4===> endIndex(endIndex-1) //lc
      System.out.println(subString2);
     }
  }
-------------------------------
public class StringDemo11 {
     public static void main(String args[]) {
      String str1="welcome";
      boolean b=str1.contains("come");
      System.out.println(b);   //true
      b=str1.contains("done");
      System.out.println(b);  //false
     }
  }
-------------------------------------------
public class StringDemo12 {
     public static void main(String args[]) {
      String str1="welcome";
      String str2=str1.replace('e','i');
      System.out.println(str2);   // wilcomi
     }
  }
-----------------------------------------------------------------------------------------------------
Arrays---> 
* data being stored in adjacent location and can be addressed by single variable name. Arrays storing data of same type. 
* Arrays are treated as objects in Java.
* Arrays needs to have a fixed size ( Disadvantage)
   Challenge is if we want add more elements/data dynamically then 
   it will create a problem or suppose we want add new items it will nbe
   challenge for us.

   So to solve this we fo for other data structures---> LinkedList, Stack,Queue,Tree
   ( Collection API)     
         
Array defining an array in java

  int arr[]=new int[5];

// int arr[]; ---> We are declaring an array
// new int[5];----> defining and initialising the array

  OR

   int arr[];    // This is Array declaration
   arr=new int[5]; // defining the array by fixing up a size of 5 and 
   intialising the array. As it is of  // int type , the array will have the default value as 0 ( and not 
   // garbage value)


class ArrayDemo1 {
  public static void main(String args[]) {
   int num[]; // array declaration 
   num=new int[5]; // We have mentioned a size of 5 and each element is initialised with initial 
                   // value as 0
  for(int i=0;i<num.length;i++){
   System.out.println(num[i]);
    }  //end of loop
  }    // end of main
}      // end of clas
---------------------------------------------------------------------------------------------
class ArrayDemo2 {
  public static void main(String args[]) {
   int num[]=new int[5]; // Array declaration and initialisation in the same line
  for(int i=0;i<num.length;i++){
   System.out.println(num[i]);
    } // end of loop
  }  // end of main
} // end of class
------------------------------------------------------------------------------------------------

class ArrayDemo3 {
  public static void main(String args[]) {
   int num[]={1,2,3,4,5,6};
  for(int i=0;i<num.length;i++){
   System.out.println(num[i]);
  }
  }
}
-------------------------------------------------------------------------------------------
class ArrayDemo4 {
  public static void main(String args[]) {
   boolean b[]=new boolean[5];
  for(int i=0;i<b.length;i++){
   System.out.println(b[i]);
  }
  }
}
------------------------------------------------------------------------------------------------
import java.util.Scanner;
class ArrayDemo5 {
  public static void main(String args[]) {
  int numbers[]=new int[5];
  Scanner scan=new Scanner(System.in);
  for(int i=0;i<numbers.length;i++){
     System.out.println("Enter the number");
     numbers[i]=scan.nextInt();
   }
  System.out.println("The values");
  for(int i=0;i<numbers.length;i++){
   System.out.println(numbers[i]);
  } 
  }
}
-----------------------------------------------------------------------------------------
import java.util.Scanner;
class ArrayDemo6 {
  public static void main(String args[]) {
  String names[]=new String[5];
  Scanner scan=new Scanner(System.in);
  for(int i=0;i<names.length;i++){
     System.out.println("Enter the name");
     names[i]=scan.next();
   }
  System.out.println("The values");
   for(int i=0;i<names.length;i++){
     System.out.println(names[i]);
    } 
  }
}
---------------------------------------------------------------------------------------------
class ArrayDemo7 {
  public static void main(String args[]) {
  int numbers[][]=new int[3][4];
  
  for(int row=0;row<numbers.length;row++){
    for(int col=0;col<numbers[row].length;col++){
         System.out.print(numbers[row][col]);
         }
       System.out.println();
     }
  }
}
--------------------------------------------------------------------------------------------------

class ArrayDemo8 {
  public static void main(String args[]) {
  int numbers[][]={{1,2,3},{4,5,6},{7,8,9}};
  
  for(int row=0;row<numbers.length;row++){
    for(int col=0;col<numbers[row].length;col++){
         System.out.print(numbers[row][col]);
         }
         System.out.println();
     }
  }
}
------------------------------------------------------------------------------------------------
import java.util.Scanner;
class ArrayDemo9 {
  public static void main(String args[]) {
  int numbers[][]=new int[3][4];
  Scanner scan=new Scanner(System.in);
  for(int row=0;row<numbers.length;row++){
    for(int col=0;col<numbers[row].length;col++){
         System.out.println("Enter the value");
         numbers[row][col]=scan.nextInt();
         }
     }
 for(int row=0;row<numbers.length;row++){
    for(int col=0;col<numbers[row].length;col++){
         System.out.print(numbers[row][col]);
        
         }
     System.out.println(); 
    }
 

 }
}

--------------------------------------------------------------------------------------------